# Universal message structure
| command ID | number of parameters | parameters... |
|:---|:---|:---|
|unsigned 8 bit|unsigned 8 bit||

## Parameter
| length of value in bytes | value |
|:---|:---|
|unsigned 16 bit||

### Value types
Specified by every command, possible are:

- Binary data string;
- Double precision IEEE float.

# Message types
There are several message types, some bidirectional but most in one direction.

Structure example is in ASCII, the conversion to the real binary format should be trivial.

## Bidirectional

### PING (0)
This message can be send by either side in a self chosen interval.
The other side should respond with a PONG within a maximum set amount of missed PINGs.
Generally this is set to 3, so the other side can miss two PINGs and only then respond with a PONG to reset the miss counter.

Structure:
`PING`

### PONG (1)
The message to reply with a PING, should be sent in response to a PING.

Structure:
`PONG`

## Watch to host

### INCREMENT (2)
An update to the live view on the host.
Should be send every LIVE_INTERVAL.

The time delta is since the previous sent INCREMENT message in milliseconds.

Structure:
`INCREMENT <sensor (ascii string)> <time delta (double)> <data... (double)>`

### PLAYBACK (3)
A data point for the full recorded session.

The time delta is since the start of the recording session in milliseconds.

Structure:
`PLAYBACK <sensor (ascii string)> <time delta (double)> <data... (double)>`

## Host to watch

### SENSOR_INTERVAL (4)
Set the interval for a given sensor in milliseconds.

Structure:
`SENSOR_INTERVAL <sensor (ascii string)> <interval (double)>`

### SENSOR_SETTING (5)
Set a specific sensor dependent setting for the watch.

Structure:
`SENSOR_SETTING <sensor (ascii string)> <setting name (ascii string)> <setting value ((binary) string)>`

#### Sensor settings
The settings available per sensor should be listed here.

### LIVE_INTERVAL (6)
Set the interval in milliseconds for sending aggregated updates for the host's live dashboard.

Structure:
`LIVE_INTERVAL <interval (double)>`

# Example
Accelerometer live view update, 100ms after the previous one.
Values are in order of x,y,z acceleration.

`INCREMENT 5 STRING!accel INTEGER!100 DOUBLE!5.43894 DOUBLE!3.47392 DOUBLE!1.32419`
